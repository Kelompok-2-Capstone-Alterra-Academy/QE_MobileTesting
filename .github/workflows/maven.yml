#name: Java CI using Maven
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set Up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: maven
##      - uses: browser-actions/setup-chrome@latest
##      - run: chrome --version
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      #    - name: Build with Maven
#      #      run: mvn -B clean test
#      - name: Run API test
#        run: mvn clean verify

#name: Java CI using Maven
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Set Up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#      - name: Cache Maven packages
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-maven-
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      - name: Run API tests
#        run: mvn clean

#name: Java CI using Maven
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    env:
#      MAVEN_OPTS: "--add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED"
#
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Set Up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#      - name: Cache Maven packages
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-maven-
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      - name: Run API tests
#        run: mvn clean verify

#
#name: Java CI using Maven
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Set Up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: maven
#      - name: Install Android SDK
#        uses: android-actions/setup-android@v2
#        with:
#          sdk-platform: 'platforms;android-30'
#          ndk-version: 'ndk;21.3.6528147'
#      - name: Set up emulator
#        run: |
#          echo "no" | avdmanager create avd -n test-emulator -k "system-images;android-30;google_apis;x86_64" -f
#          emulator -avd test-emulator -no-window -no-audio &
#          android-wait-for-emulator
#          adb shell input keyevent 82 &
#          echo "emulator.avd=test-emulator" >> $GITHUB_ENV
#          echo "emulator.arguments=-no-window -no-audio" >> $GITHUB_ENV
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      - name: Run API tests
#        run: mvn clean verify

#name: Java CI using Maven
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set Up JDK 8
#        uses: actions/setup-java@v3
#        with:
#          java-version: '8'
#          distribution: 'temurin'
#          cache: maven
#      - name: Install Android SDK
#        run: |
#          wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O android-sdk.zip
#          mkdir $HOME/android-sdk
#          unzip -q android-sdk.zip -d $HOME/android-sdk
#          export ANDROID_SDK_ROOT=$HOME/android-sdk
#          export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin
#          yes | sdkmanager --licenses
#          sdkmanager "platforms;android-29" >/dev/null
#          sdkmanager "emulator" >/dev/null
#          sdkmanager "system-images;android-29;google_apis;x86" >/dev/null
#          avdmanager create avd --force --name emulator --package "system-images;android-29;google_apis;x86" --abi "google_apis/x86" --device "pixel"
#          emulator -avd emulator -no-window -no-audio -no-boot-anim -no-accel &
#          echo "Waiting for the emulator to start..."
#          android-wait-for-emulator-loop
#          adb devices
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      - name: Run API test
#        run: mvn clean verify
#
#      - name: Wait for emulator
#        id: wait-for-emulator
#        run: |
#          echo "Waiting for the emulator to boot up..."
#          boot_completed="no"
#          while [ "$boot_completed" != "1" ]; do
#            boot_completed=$(adb shell getprop sys.boot_completed 2>&1 | tr -d '\r')
#            sleep 1
#          done
#          echo "Emulator is ready!"
#        if: steps.wait-for-emulator.outcome == 'success'


#name: Mobile Testing with Serenity
#
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  connected-tests:
#    runs-on: macos-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: 11
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Set up Android emulator
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 30
#          target: google_apis
#          arch: x86_64
#          script: |
#            echo no | avdmanager create avd --force -n test -k "system-images;android-30;google_apis;x86_64"
#            emulator -avd test -no-audio -no-window &
#
#      - name: Wait for emulator to start
#        run: |
#          timeout=180
#          counter=0
#          boot_completed=""
#          echo "Waiting for the emulator to start..."
#          while [[ "$counter" -lt "$timeout" && "$boot_completed" != "1" ]]; do
#            sleep 1
#            counter=$((counter+1))
#            boot_completed=$(adb -e shell getprop sys.boot_completed 2>&1 | tr -d '\r')
#          done
#          if [[ "$boot_completed" != "1" ]]; then
#            echo "Timeout: Emulator did not start within the specified time."
#            exit 1
#          fi
#          echo "Emulator is ready!"
#
#      - name: Run tests
#        run: |
#          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
#          echo "ANDROID_HOME: $ANDROID_HOME"
#          echo "PATH: $PATH"
#          mvn clean verify -Pserenity

#on:
#  push:
#    branches:
#      - master
#
#name: Genymotion Cloud SaaS
#
#jobs:
#  test:
#    name: Start Genymotion Cloud SaaS instance
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: "3.10.11"
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: "17"
#          distribution: "temurin"
#
#      - name: Setup Android SDK
#        uses: android-actions/setup-android@v2
#
#      - name: Start Genymotion Cloud SaaS instance
#        uses:  genymobile/genymotion-saas-github-action@v0.4
#        with:
##          email: ${{ secrets.GMSAAS_EMAIL }}
#          email: "wiyanalta@gmail.com"
##          password: ${{ secrets.GMSAAS_PASSWORD }}
#          password: "@Alta123"
#          recipe_uuid: ea5fda48-fa8b-48c1-8acc-07d910856141 # Google Pixel XL 8.1


#on:
#  push:
#    branches:
#      - master
#
#name: Genymotion Cloud SaaS
#
#jobs:
#  test:
#    name: Start Genymotion Cloud SaaS instance
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: "3.10.11"
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: "17"
#          distribution: "temurin"
#
#      - name: Setup Android SDK
#        uses: android-actions/setup-android@v2
#
#      - name: Start Genymotion Cloud SaaS instance
#        uses: genymobile/genymotion-saas-github-action@v0.4
#        with:
#          email: "wiyanalta@gmail.com"
#          password: "@Alta123"
#          recipe_uuid: ea5fda48-fa8b-48c1-8acc-07d910856141 # Google Pixel XL 8.1
#
#      - name: Run Serenity Maven tests
#        run: mvn clean verify -Pserenity
#
#      # Any additional steps or post-test actions can be included here

on:
  push:
    branches:
      - master

name: Genymotion Cloud SaaS

jobs:
  test:
    name: Start Genymotion Cloud SaaS instance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

#      - uses: actions/setup-python@v4
#        with:
#          python-version: "3.10.11"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Start Genymotion Cloud SaaS instance
        uses: genymobile/genymotion-saas-github-action@v0.4
        with:
          email: "wiyanalta@gmail.com"
          password: "@Alta123"
#          recipe_uuid: 9c03b982-544d-40bb-887d-57a2144d27fb

      - name: Build with Maven
        run: mvn -B package --file pom.xml
            #    - name: Build with Maven
            #      run: mvn -B clean test

      - name: Run API test
        run: mvn clean verify

      # Any additional steps or post-test actions can be included here

#name: Integration Tests
#
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#
#      - name: Start Genymotion virtual device
#        run: |
#          # Start the Genymotion virtual device using Genymotion CLI commands
#          # Example: genymotion --version
#
#      - name: Install Genymotion
#        run: |
#          wget https://dl.genymotion.com/releases/genymotion-3.2.1/genymotion-3.2.1-linux_x64.bin
#          chmod +x genymotion-3.2.1-linux_x64.bin
#          echo "y" | sudo ./genymotion-3.2.1-linux_x64.bin -d /opt/genymotion
#
#
#      - name: Start Genymotion virtual device
#        run: |
#          /opt/genymotion/genymotion/./genymotion --headless --no-popup --memory 1024 --device "Samsung Galaxy S4" # Adjust the virtual device settings as per your requirements
#
#
#      - name: Run integration tests
#        run: mvn clean verify

#name: Android CI
#
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#
#      - name: Set up Genymotion
#        run: |
#          wget https://dl.genymotion.com/releases/genymotion-3.2.1/genymotion-3.2.1-linux_x64.bin
#          chmod +x genymotion-3.2.1-linux_x64.bin
#          yes | ./genymotion-3.2.1-linux_x64.bin --destination genymotion/
#
#
#      - name: Build and run Serenity tests
#        run: mvn clean verify -Dmaven.test.failure.ignore=true
#
#      - name: Stop Genymotion virtual device
#        run: adb emu kill









